// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

package api

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Account service

func NewAccountEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Account service

type AccountService interface {
	// 注册新用户
	Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*RegisterResp, error)
	// 用户登录
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error)
	//
	GetUser(ctx context.Context, in *GetUserReq, opts ...client.CallOption) (*GetUserResp, error)
	//
	GetUsers(ctx context.Context, in *GetUsersReq, opts ...client.CallOption) (*GetUsersResp, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*RegisterResp, error) {
	req := c.c.NewRequest(c.name, "Account.Register", in)
	out := new(RegisterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error) {
	req := c.c.NewRequest(c.name, "Account.Login", in)
	out := new(LoginResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetUser(ctx context.Context, in *GetUserReq, opts ...client.CallOption) (*GetUserResp, error) {
	req := c.c.NewRequest(c.name, "Account.GetUser", in)
	out := new(GetUserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetUsers(ctx context.Context, in *GetUsersReq, opts ...client.CallOption) (*GetUsersResp, error) {
	req := c.c.NewRequest(c.name, "Account.GetUsers", in)
	out := new(GetUsersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountHandler interface {
	// 注册新用户
	Register(context.Context, *RegisterReq, *RegisterResp) error
	// 用户登录
	Login(context.Context, *LoginReq, *LoginResp) error
	//
	GetUser(context.Context, *GetUserReq, *GetUserResp) error
	//
	GetUsers(context.Context, *GetUsersReq, *GetUsersResp) error
}

func RegisterAccountHandler(s server.Server, hdlr AccountHandler, opts ...server.HandlerOption) error {
	type account interface {
		Register(ctx context.Context, in *RegisterReq, out *RegisterResp) error
		Login(ctx context.Context, in *LoginReq, out *LoginResp) error
		GetUser(ctx context.Context, in *GetUserReq, out *GetUserResp) error
		GetUsers(ctx context.Context, in *GetUsersReq, out *GetUsersResp) error
	}
	type Account struct {
		account
	}
	h := &accountHandler{hdlr}
	return s.Handle(s.NewHandler(&Account{h}, opts...))
}

type accountHandler struct {
	AccountHandler
}

func (h *accountHandler) Register(ctx context.Context, in *RegisterReq, out *RegisterResp) error {
	return h.AccountHandler.Register(ctx, in, out)
}

func (h *accountHandler) Login(ctx context.Context, in *LoginReq, out *LoginResp) error {
	return h.AccountHandler.Login(ctx, in, out)
}

func (h *accountHandler) GetUser(ctx context.Context, in *GetUserReq, out *GetUserResp) error {
	return h.AccountHandler.GetUser(ctx, in, out)
}

func (h *accountHandler) GetUsers(ctx context.Context, in *GetUsersReq, out *GetUsersResp) error {
	return h.AccountHandler.GetUsers(ctx, in, out)
}
