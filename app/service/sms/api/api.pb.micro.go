// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SMS service

func NewSMSEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SMS service

type SMSService interface {
	// Send send sms
	Send(ctx context.Context, in *SendReq, opts ...client.CallOption) (*SendResp, error)
	// SendBatch send sms batch
	SendBatch(ctx context.Context, in *SendBatchReq, opts ...client.CallOption) (*SendBatchResp, error)
}

type sMSService struct {
	c    client.Client
	name string
}

func NewSMSService(name string, c client.Client) SMSService {
	return &sMSService{
		c:    c,
		name: name,
	}
}

func (c *sMSService) Send(ctx context.Context, in *SendReq, opts ...client.CallOption) (*SendResp, error) {
	req := c.c.NewRequest(c.name, "SMS.Send", in)
	out := new(SendResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSService) SendBatch(ctx context.Context, in *SendBatchReq, opts ...client.CallOption) (*SendBatchResp, error) {
	req := c.c.NewRequest(c.name, "SMS.SendBatch", in)
	out := new(SendBatchResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SMS service

type SMSHandler interface {
	// Send send sms
	Send(context.Context, *SendReq, *SendResp) error
	// SendBatch send sms batch
	SendBatch(context.Context, *SendBatchReq, *SendBatchResp) error
}

func RegisterSMSHandler(s server.Server, hdlr SMSHandler, opts ...server.HandlerOption) error {
	type sMS interface {
		Send(ctx context.Context, in *SendReq, out *SendResp) error
		SendBatch(ctx context.Context, in *SendBatchReq, out *SendBatchResp) error
	}
	type SMS struct {
		sMS
	}
	h := &sMSHandler{hdlr}
	return s.Handle(s.NewHandler(&SMS{h}, opts...))
}

type sMSHandler struct {
	SMSHandler
}

func (h *sMSHandler) Send(ctx context.Context, in *SendReq, out *SendResp) error {
	return h.SMSHandler.Send(ctx, in, out)
}

func (h *sMSHandler) SendBatch(ctx context.Context, in *SendBatchReq, out *SendBatchResp) error {
	return h.SMSHandler.SendBatch(ctx, in, out)
}
