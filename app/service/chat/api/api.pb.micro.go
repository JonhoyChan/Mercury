// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

package api

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Chat service

func NewChatEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Chat service

type ChatService interface {
	// Create new client
	CreateClient(ctx context.Context, in *CreateClientReq, opts ...client.CallOption) (*CreateClientResp, error)
	// Update client
	UpdateClient(ctx context.Context, in *UpdateClientReq, opts ...client.CallOption) (*Empty, error)
	// Delete client
	DeleteClient(ctx context.Context, in *DeleteClientReq, opts ...client.CallOption) (*Empty, error)
	// Generate a new token for client
	GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...client.CallOption) (*TokenResp, error)
	// Connect a connection
	Connect(ctx context.Context, in *ConnectReq, opts ...client.CallOption) (*Empty, error)
	// Disconnect a connection
	Disconnect(ctx context.Context, in *DisconnectReq, opts ...client.CallOption) (*Empty, error)
	// Heartbeat a connection
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...client.CallOption) (*Empty, error)
}

type chatService struct {
	c    client.Client
	name string
}

func NewChatService(name string, c client.Client) ChatService {
	return &chatService{
		c:    c,
		name: name,
	}
}

func (c *chatService) CreateClient(ctx context.Context, in *CreateClientReq, opts ...client.CallOption) (*CreateClientResp, error) {
	req := c.c.NewRequest(c.name, "Chat.CreateClient", in)
	out := new(CreateClientResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) UpdateClient(ctx context.Context, in *UpdateClientReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Chat.UpdateClient", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) DeleteClient(ctx context.Context, in *DeleteClientReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Chat.DeleteClient", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...client.CallOption) (*TokenResp, error) {
	req := c.c.NewRequest(c.name, "Chat.GenerateToken", in)
	out := new(TokenResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Connect(ctx context.Context, in *ConnectReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Chat.Connect", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Disconnect(ctx context.Context, in *DisconnectReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Chat.Disconnect", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Chat.Heartbeat", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatHandler interface {
	// Create new client
	CreateClient(context.Context, *CreateClientReq, *CreateClientResp) error
	// Update client
	UpdateClient(context.Context, *UpdateClientReq, *Empty) error
	// Delete client
	DeleteClient(context.Context, *DeleteClientReq, *Empty) error
	// Generate a new token for client
	GenerateToken(context.Context, *GenerateTokenReq, *TokenResp) error
	// Connect a connection
	Connect(context.Context, *ConnectReq, *Empty) error
	// Disconnect a connection
	Disconnect(context.Context, *DisconnectReq, *Empty) error
	// Heartbeat a connection
	Heartbeat(context.Context, *HeartbeatReq, *Empty) error
}

func RegisterChatHandler(s server.Server, hdlr ChatHandler, opts ...server.HandlerOption) error {
	type chat interface {
		CreateClient(ctx context.Context, in *CreateClientReq, out *CreateClientResp) error
		UpdateClient(ctx context.Context, in *UpdateClientReq, out *Empty) error
		DeleteClient(ctx context.Context, in *DeleteClientReq, out *Empty) error
		GenerateToken(ctx context.Context, in *GenerateTokenReq, out *TokenResp) error
		Connect(ctx context.Context, in *ConnectReq, out *Empty) error
		Disconnect(ctx context.Context, in *DisconnectReq, out *Empty) error
		Heartbeat(ctx context.Context, in *HeartbeatReq, out *Empty) error
	}
	type Chat struct {
		chat
	}
	h := &chatHandler{hdlr}
	return s.Handle(s.NewHandler(&Chat{h}, opts...))
}

type chatHandler struct {
	ChatHandler
}

func (h *chatHandler) CreateClient(ctx context.Context, in *CreateClientReq, out *CreateClientResp) error {
	return h.ChatHandler.CreateClient(ctx, in, out)
}

func (h *chatHandler) UpdateClient(ctx context.Context, in *UpdateClientReq, out *Empty) error {
	return h.ChatHandler.UpdateClient(ctx, in, out)
}

func (h *chatHandler) DeleteClient(ctx context.Context, in *DeleteClientReq, out *Empty) error {
	return h.ChatHandler.DeleteClient(ctx, in, out)
}

func (h *chatHandler) GenerateToken(ctx context.Context, in *GenerateTokenReq, out *TokenResp) error {
	return h.ChatHandler.GenerateToken(ctx, in, out)
}

func (h *chatHandler) Connect(ctx context.Context, in *ConnectReq, out *Empty) error {
	return h.ChatHandler.Connect(ctx, in, out)
}

func (h *chatHandler) Disconnect(ctx context.Context, in *DisconnectReq, out *Empty) error {
	return h.ChatHandler.Disconnect(ctx, in, out)
}

func (h *chatHandler) Heartbeat(ctx context.Context, in *HeartbeatReq, out *Empty) error {
	return h.ChatHandler.Heartbeat(ctx, in, out)
}
